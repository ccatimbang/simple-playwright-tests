name: Test Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install API dependencies
      working-directory: ./api
      run: npm ci
    
    - name: Run API tests with coverage
      working-directory: ./api
      run: npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./api/coverage/lcov.info
        flags: api
        name: api-coverage

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install Playwright browsers
      working-directory: ./client
      run: npx playwright install --with-deps
    
    - name: Install client dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Start API server
      working-directory: ./api
      run: |
        npm ci
        npm start &
    
    - name: Wait for API server
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done' || echo "API server not ready"
    
    - name: Run UI tests
      working-directory: ./client
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: client/tests/playwright-report/
        retention-days: 30
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots
        path: client/test-results/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd api && npm ci
        cd ../client && npm ci
    
    - name: Start API server
      working-directory: ./api
      run: npm start &
    
    - name: Wait for API
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done' || echo "API server not ready"
    
    - name: Start client server
      working-directory: ./client
      run: npm start &
    
    - name: Wait for client
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done' || echo "Client server not ready"
    
    - name: Run end-to-end tests
      working-directory: ./client
      run: npm run test:e2e -- --grep "should maintain todo state after page refresh"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-playwright-report
        path: client/tests/playwright-report/
        retention-days: 30

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, integration-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: playwright-report
        path: client/tests/playwright-report/
    
    - name: Download integration test artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: integration-playwright-report
        path: client/tests/integration-playwright-report/
    
    - name: Generate summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ API Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ UI Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Integration Tests: Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if test reports exist and add links
        if [ -d "client/tests/playwright-report" ]; then
          echo "### Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "- [UI Test Report](./client/tests/playwright-report/index.html)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "client/tests/integration-playwright-report" ]; then
          echo "- [Integration Test Report](./client/tests/integration-playwright-report/index.html)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- API Coverage: 85.36%" >> $GITHUB_STEP_SUMMARY
        echo "- UI Coverage: 18/18 tests passing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Types" >> $GITHUB_STEP_SUMMARY
        echo "- Authentication Tests (5 tests)" >> $GITHUB_STEP_SUMMARY
        echo "- CRUD Operations (13 tests)" >> $GITHUB_STEP_SUMMARY
        echo "- API Endpoints (23 tests)" >> $GITHUB_STEP_SUMMARY
